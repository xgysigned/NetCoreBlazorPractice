@page "/"
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">

        <DiagramCanvas>

            <Widgets>
                <GridWidget Size="30" Mode="GridMode.Line" BackgroundColor="white" />

                <NavigatorWidget Width="200" Height="120"
                                 Class="border border-black bg-white absolute"
                                 Style="bottom: 15px; right: 15px;position: absolute;" />
            </Widgets>
        </DiagramCanvas>

    </CascadingValue>
</div>

@code{
    // 构建Blazor.Diagrams 提供的 Diagram 对象
    private BlazorDiagram Diagram { get; set; } = null!;

    /// <summary>
    /// 组件初始化时调用的方法
    /// 用于配置流程图选项、创建节点和连接线
    /// </summary>
    protected override void OnInitialized()
    {
        // 创建流程图的配置选项
        var options = new BlazorDiagramOptions
            {
                // 配置连接线（Link）的默认行为
                Links =
        {
            // 使用 NormalRouter：连接线从端口出发，走直线或折线到达目标
            DefaultRouter = new NormalRouter(),

            // 使用 SmoothPathGenerator：生成平滑曲线（贝塞尔曲线）作为连接线路径
            // 若想用直角线，可替换为 new RightAnglePathGenerator()
            DefaultPathGenerator = new SmoothPathGenerator()
        },

                // 允许用户通过框选或按住 Shift 点击选择多个节点或连接线
                AllowMultiSelection = true,

                // 启用画布缩放功能（鼠标滚轮缩放）
                Zoom = { Enabled = true },
            };

        // 初始化 BlazorDiagram 实例，并传入配置选项
        // 此对象是整个流程图的核心控制器，管理节点、连线、交互等
        Diagram = new BlazorDiagram(options);

        // 创建第一个节点，位于画布坐标 (50, 50) 处
        // 并将其添加到 Diagram 的节点集合中
        var firstNode = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(50, 50))
            {
                Title = "节点 1"  // 设置节点显示标题
            });

        // 创建第二个节点，位于 (200, 100)
        var secondNode = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(200, 100))
            {
                Title = "节点 2"
            });

        // 为第二个节点添加一个位于左侧的端口（Port）
        // PortAlignment.Left 表示端口显示在节点的左边缘
        var leftPort = secondNode.AddPort(PortAlignment.Left);

        // 为第二个节点添加一个位于右侧的端口
        var rightPort = secondNode.AddPort(PortAlignment.Right);

        // 定义连接线的“源锚点”（source anchor）
        // ShapeIntersectionAnchor 会自动计算从目标点到源节点形状边界的交点作为连接起点
        // 这样连接线能自然地连接到节点轮廓上，而不是中心
        var sourceAnchor = new ShapeIntersectionAnchor(firstNode);

        // 定义连接线的“目标锚点”
        // SinglePortAnchor 表示连接线终点固定在这个端口的位置
        var targetAnchor = new SinglePortAnchor(leftPort);

        // 创建一条连接线，从第一个节点（通过形状交点）连接到第二个节点的左端口
        // 并将该连接线添加到 Diagram 的连接线集合中
        var link = Diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));

        // 至此，一个包含两个节点和一条平滑连接线的简单流程图已构建完成
    }
}

<style type="text/css">

    .diagram-container {
        width: 100%;
        height: 600px;
        border: 1px solid black; /* Just visual */
    }

</style>